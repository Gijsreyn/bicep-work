<#
    .SYNOPSIS
        Runs a SQL vulnerability assessment scan, captures the latest scan as baseline and saves the results to a file

    .DESCRIPTION
        Runs a SQL vulnerability assessment scan, captures the latest scan as baseline and saves the results to a file

    .PARAMETER SubscriptionId
        The Subscription id of Azure

    .PARAMETER ResourceGroupName
        The Resource Group name the Azure SQL Server is located in

    .PARAMETER ServerName
        The Azure SQL Server name

    .PARAMETER DatabaseName
        The Azure SQL database(s) to capture the baseline on. Defaults to AdventureWorksLT and master

    .PARAMETER HelperModulePath
        The helper module path to import

    .PARAMETER OutputPath
        The output path to save results in

    .EXAMPLE
        PS> & .\Scripts\Get-SqlBaseLineInformation.ps1 `
            -SubscriptionId <subscriptionId> `
            -ResourceGroupName <resourceGroupName> `
            -ServerName <serverName> `
            -HelperModulePath SqlServerHelper.psm1 `
            -OutputPath C:\Baseline

    .NOTES
        Author: Gijs Reijn (@GijsReyn)
#>
[CmdletBinding()]
Param (
    [string]$SubscriptionId, 
    [string]$ResourceGroupName, 
    [string]$ServerName, 
    [string[]]$DatabaseName = @('AdventureWorksLT', 'master'),
    [string]$HelperModulePath,
    [System.IO.DirectoryInfo]$OutputPath
)

Import-Module $HelperModulePath -Force

foreach ($Database in $DatabaseName) {
    Write-Host -Object ("Executing 'Invoke-SqlVulnerabilityAssessmentScan' on - {0}" -f $Database)
    Invoke-SqlVulnerabilityAssessmentScan -SubscriptionId $SubscriptionId `
        -ResourceGroupName $ResourceGroupName `
        -ServerName $ServerName `
        -DatabaseName $Database

    # Check if Express Configuration is enabled
    $ECState = (GetExpressConfigurationStatus -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ServerName $ServerName).properties.State

    Write-Host "Express Configuration status:"$ECState

    if ($ECState -eq "Enabled") {
        if ($Database -eq 'master') 
        {
            Write-Host "Set baseline on 'master' database"
            SetLastScanAsBaselineOnSystemDatabase -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ServerName $ServerName
        }
        else 
        {
            Write-Host "Set baseline on database: '$Database'"
            SetLastScanAsBaselineOnUserDatabase -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ServerName $ServerName -DatabaseName $Database
        }
    }
    else {
        Write-Host "The specified server does not have VA Express Configuration enabled therefore bulk baseline operations were not performed."
        return
    }

    # After the baseline is set it can be extracted
    Write-Host -Object ("Calling 'Get-SqlVulnerabilityAssessmentBaseline' for database - {0}" -f $Database)
    $BaselineRaw = Get-SqlVulnerabilityAssessmentBaseline -SubscriptionId $SubscriptionId -ResourceGroupName $ResourceGroupName -ServerName $ServerName -DatabaseName $Database

    $Rules = ($BaselineRaw.Content | ConvertFrom-Json).properties.results | ConvertTo-Json

    $JsonOutput = @"
        {
            "properties": {
                "latestScan": false,
                "results": $Rules
            }
        }
"@
        $JsonFormatted = PrettyPrintJson -json $JsonOutput
        $JsonFormatted | Out-File -FilePath (Join-Path -Path $OutputPath -ChildPath "$Database.json") -Encoding utf8
}