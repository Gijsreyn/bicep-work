<#
    .SYNOPSIS
        Sets the baseline on an Azure SQL Server database(s)

    .DESCRIPTION
        Sets the baseline on an Azure SQL Server database(s)

    .PARAMETER SubscriptionId
        The Subscription id of Azure

    .PARAMETER ResourceGroupName
        The Resource Group name the Azure SQL Server is located in

    .PARAMETER ServerName
        The Azure SQL Server name

    .PARAMETER DatabaseName
        The Azure SQL database(s) to set the baseline on. Defaults to AdventureWorksLT and master

    .PARAMETER HelperModulePath
        The helper module path to import

    .PARAMETER BaseLinePath
        The path to locate baseline(s) in

    .EXAMPLE
        PS> & .\Scripts\Set-SqlBaseLineInformation.ps1 `
            -SubscriptionId <subscriptionId> `
            -ResourceGroupName <resourceGroupName> `
            -ServerName <serverName> `
            -HelperModulePath SqlServerHelper.psm1 `
            -BaseLinePath C:\Baseline

    .NOTES
        Author: Gijs Reijn (@GijsReyn)
#>
[CmdletBinding()]
Param (
    [string]$SubscriptionId, 
    [string]$ResourceGroupName, 
    [string]$ServerName, 
    [string[]]$DatabaseName = @('AdventureWorksLT', 'master'),
    [string]$HelperModulePath,
    [System.IO.DirectoryInfo]$BaseLinePath
)

Import-Module $HelperModulePath -Force

foreach ($Database in $DatabaseName)
{
    Write-Host -Object ("Retrieving baseline information for database - {0}" -f $Database)
    $FilePath = Get-ChildItem -Path "$BaseLinePath\*" -Include "$Database.json"
    if ($FilePath)
    {
        Write-Host -Object ("Applying baseline {0} for database - {1}" -f $FilePath.FullName, $Database)
        $Body = Get-Content $FilePath -Raw
        Set-SqlVulnerabilityAssessmentBaseline -SubscriptionId $SubscriptionId `
            -ResourceGroupName $ResourceGroupName `
            -ServerName $ServerName `
            -DatabaseName $Database `
            -Body $Body

        # You can invoke a scan directly or wait
        # Invoke-SqlVulnerabilityAssessmentScan -SubscriptionId $SubscriptionId `
        #     -ResourceGroupName $ResourceGroupName `
        #     -ServerName $ServerName `
        #     -DatabaseName $Database
    }
    else 
    {
        Write-Warning -Message ("Baseline no found for database - {0} in folder {1}" -f $Database, $BaseLinePath)
    } 
}